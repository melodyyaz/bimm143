---
title: "Class 08: Machine Learning Mini Project"
format: pdf
editor: visual
---


## 

#Breast Cancer Project

Today we are going to explore some data from the University of Wisconsin Cancer Center on Breast biopsy data

```{r}
wisc.data <- read.csv("https://bioboot.github.io/bimm143_S23/class-material/WisconsinCancer.csv", row.names = 1)
head(wisc.data)
read.csv("https://bioboot.github.io/bimm143_S23/class-material/new_samples.csv")
```

>Q. How many patient samples are in this data set?

```{r}
nrow(wisc.data)
```

There are `r nrow(wisc.data)` patients in this dataset.


>Q. How many cancer (M) and non cancer (B) samples are there?

```{r}
table(wisc.data$diagnosis)
```

Save the diagnosis column as a reference for later

```{r}
diagnosis <- as.factor(wisc.data$diagnosis)
#diagnosis

```

>Q. Is there any way to remove the first column?

```{r}
wisc <- wisc.data[,-1]
```

>Q. How many dimensions/variables/columns are in this dataset?

```{r}
ncol(wisc)
```

#Principal Component Analysis (PCA)

To perform PCA in R we can use the `prcomp()` function. It takes as input a numeric dataset and optional `scale=FALSE/TRUE` argument.

We general always want to set `scale=TRUE` but lets make sure by checking if the mean and standard deviaton values are different across these 30 columns

```{r}
round (colMeans(wisc))
```

```{r}
pca <- prcomp(wisc, scale=TRUE)
summary(pca)
attributes(pca)
```

```{r}
plot(pca$x[,1], pca$x[,2], col=diagnosis)
```

```{r}
library(ggplot2)

x<- as.data.frame(pca$x)

ggplot(x) + 
  aes(PC1, PC2, col=diagnosis)+
  geom_point()
```

>Q. How much variance is captured in the tip 3 PCs?

they capture 76% of the variance

>Q9.  For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?

```{r}
pca$rotation["concave.points_mean", 1]
```

```{r}
attributes(pca)
```

#Section 4

#Combine PCA results iwth clustering

We can use the new PCA variables (i.e. the scores along the PCs contained in t `pca$x`) as input for other methods such as clustering
```{r}
#hclust needs a distance matrix as input

d <- dist(pca$x[,1:3])

hc <- hclust(d, method="ward.D2")
plot(hc)
```


To get our cluster membership vector, we can use the `cutree()` fucntion and specify a height (`h`) or number of groups (`k`).

```{r}
grps <- cutree(hc, h=80)
table(grps)
```


```{r}
#telling us how many B's and M's are in each group

table(diagnosis, grps)
```

we can also plot our results using out clusterig vector `grps`

```{r}
plot(pca$x[,1], pca$x[,2], col=grps)
```


>Q17. what is the specificity and sensitivity of out curretn results?

```{r}
#Sensitivity=trueneg/(truepositive+false negative)= 
333/(179+24)

#Specificity= trueneg/(trueneg+falsneg) = 
333/(333+24)
 
```


#use predict fucntion to take our PCA model from before an new cancer ce;l data and prpject the data into our PCA space

```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(pca, newdata=new)
npc
```

```{r}
plot(pca$x[,1:2], col=grps)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```


>Q18. which of these new patients should we prioritize for follow up based on your results?
 
 We should prioritize Patient 2 (black dots), as their patient profile matches up most with patients diagnosed with malignant tumors. 
 
 
```{r}
# use sessionInfo() function to report on our R systems 
sessionInfo()
```

